@import "../../../pages/App/sass/functions";
@import "../../../pages/App/sass/breakpointsVariables";
@import "../../../pages/App/sass/mixinsDisplay";

.item {
  width: toRem(300);
  height: toRem(378);
  border: 1px solid var(--color-alto-opacity-30);
  background-color: var(--color-white-opacity-5);
  padding: toRem(20);
  position: relative;
  margin-right: toRem(15);

  @media only screen and (min-width: $screen-md) {
    min-width: toRem(620);
    min-height: toRem(370);
    height: toRem(406);
    padding: toRem(30);
    margin-right: toRem(30);
  }

  .bg {
    object-fit: cover;
  }

  .icon {
    width: toRem(60);
    height: toRem(60);
    z-index: 1;
    position: relative;

    @media only screen and (min-width: $screen-md) {
      width: toRem(80);
      height: toRem(80);
    }
  }

  .itemTitle, .itemText {
    color: var(--color-white);
    z-index: 1;
    position: relative;
  }

  .itemTitle {
    font-size: toRem(24);
    line-height: getLineHeight(28, 24);
    padding-top: toRem(30);
    padding-bottom: toRem(20);

    @media only screen and (min-width: $screen-md) {
      font-size: toRem(30);
      line-height: getLineHeight(40, 30);
      padding-bottom: toRem(30);
    }
  }

  .itemText {
    font-size: toRem(14);
    line-height: getLineHeight(20, 14);
    margin: 0;

    @media only screen and (min-width: $screen-md) {
      font-size: toRem(18);
      line-height: getLineHeight(26, 18);
    }
  }

  &.withoutMinWidth {
    @media only screen and (min-width: $screen-md) {
      min-width: unset;
    }
  }
}

.models, .crossPlatform, .solomiya {
  width: 100%;
  height: auto;

  @media only screen and (min-width: $screen-md) {
    min-height: toRem(342);
  }

  @media only screen and (min-width: $screen-lg + 1) {
    height: 100%;
  }

  &:first-of-type {
    margin-bottom: toRem(15);

    @media only screen and (min-width: $screen-md) {
      margin-bottom: toRem(30);
    }

    @media only screen and (min-width: $screen-lg + 1) {
      margin-bottom: 0;
    }
  }

  .itemTitle {
    @media only screen and (min-width: $screen-lg + 1) {
      padding-bottom: toRem(30);
    }
  }

  .itemText {
    @media only screen and (min-width: $screen-md) {
      max-width: toRem(570);
    }

    @media only screen and (min-width: $screen-lg + 1) {
      max-width: unset;
    }

    @media only screen and (max-width: $screen-lg) {
      max-width: toRem(640);
    }

    @media only screen and (max-width: $screen-md - 1) {
      padding-right: toRem(45);
    }
  }
}

.models {
  width: 100%;
  margin-left: 0;
  max-width: unset;
  max-height: unset;
  
  .itemTitle {
    font-size: toRem(20);
    line-height: getLineHeight(28, 20);

    @media only screen and (min-width: $screen-md) {
      font-size: toRem(30);
      line-height: getLineHeight(40, 30);
    }
  }
  
  .itemText {
    letter-spacing: -0.1px;
    
    @media only screen and (max-width: $screen-lg) {
      max-width: toRem(570);
    }

    @media only screen and (max-width: $screen-md - 1) {
      padding-right: 0;
    }
  }
}

.crossPlatform {
  .itemTitle {
    font-size: toRem(20);
    line-height: getLineHeight(28, 20);

    @media only screen and (min-width: $screen-md) {
      font-size: toRem(30);
      line-height: getLineHeight(40, 30);
    }
  }
}

.solomiya {
  min-height: toRem(318);

  @media only screen and (min-width: $screen-md) {
    min-height: toRem(342);
  }

  @media only screen and (min-width: $screen-lg + 1) {
    min-height: toRem(368);
  }

  .itemTitle {
    @media only screen and (max-width: $screen-md - 1) {
      font-size: toRem(20);
      line-height: getLineHeight(28, 20);
    }
  }

  .itemText {
    @media only screen and (max-width: $screen-md - 1) {
      padding-right: 0;
      font-size: toRem(16);
      line-height: getLineHeight(24, 16);
    }
  }
}

.dedicatedTeam {
  width: 100%;
  height: auto;
  padding: toRem(20);

  @media only screen and (min-width: $screen-md) {
    padding: toRem(30) toRem(30) toRem(40);
  }

  @media only screen and (min-width: $screen-xl) {
    @include flex-basis(40px, 2);
    width: unset;
    min-width: unset;
    margin-right: 0;
    height: auto;
  }

  .icon {
    width: toRem(60);
    height: toRem(60);

    @media only screen and (min-width: $screen-md) {
      width: toRem(80);
      height: toRem(80);
    }
  }

  .itemTitle {
    padding: toRem(30) 0 toRem(20);

    @media only screen and (min-width: $screen-md) {
      padding: toRem(40) 0 toRem(30);
    }

    @media only screen and (max-width: $screen-md - 1) {
      font-size: toRem(20);
      line-height: getLineHeight(28, 20);
    }
  }

  .itemText {
    ul {
      list-style: none;

      li {
        &:not(:first-of-type) {
          padding-top: toRem(10);
        }
      }
    }
  }

  &:first-of-type {
    ul {
      max-width: 540px;

      @media only screen and (max-width: $screen-xl) {
        max-width: 100%;
      }
    }
  }

  &:last-of-type {
    margin-top: toRem(20);

    @media only screen and (min-width: $screen-md) {
      margin-top: toRem(30);
    }

    @media only screen and (min-width: $screen-xl) {
      margin-top: unset;
    }
  }
}

.machine {
  width: toRem(300);
  height: toRem(366);

  @media only screen and (min-width: $screen-md) {
    min-width: toRem(620);
    min-height: toRem(380);
    padding: toRem(30) toRem(30) toRem(40);
  }

  .itemTitle {
    font-size: toRem(20);
    line-height: getLineHeight(28, 20);

    @media only screen and (min-width: $screen-md) {
      font-size: toRem(30);
      line-height: getLineHeight(40, 30);
    }
  }

  .itemText {
    br {
      @media only screen and (max-width: $screen-md - 1) {
        display: none;
      }
    }

    .inlineBlock {
      display: inline-block;
    }
  }
}

.designAudit {
  width: 100%;
  height: auto;
  border: none;
  background-color: var(--color-white-opacity-5);
  padding: toRem(20);
  position: relative;

  @media only screen and (min-width: $screen-md) {
    width: 100%;
    height: 230px;
    min-width: toRem(407);
    min-height: auto;
    padding: toRem(30);
  }

  @media only screen and (min-width: $screen-xxl) {
    width: 100%;
    height: 347px;
    min-width: toRem(407);
    min-height: auto;
    padding: toRem(30);
  }

  .bg {
    object-fit: cover;
  }

  .icon {
    width: toRem(60);
    height: toRem(60);
    z-index: 1;
    position: relative;

    @media only screen and (min-width: $screen-md) {
      width: toRem(80);
      height: toRem(80);
    }
  }

  .itemTitle, .itemText {
    color: var(--color-white);
    z-index: 1;
    position: relative;
  }

  .itemTitle {
    font-size: toRem(25);
    line-height: getLineHeight(35, 25);
    padding-top: 0;
    padding-bottom: toRem(20);

    @media only screen and (min-width: $screen-md) {
      font-size: toRem(36);
      line-height: getLineHeight(46, 36);
      padding-bottom: toRem(30);
    }

    @media only screen and (min-width: $screen-xxl) {
      font-size: toRem(50);
      line-height: getLineHeight(64, 50);
      padding-bottom: toRem(30);
    }
  }

  .itemText {
    font-size: toRem(16);
    line-height: getLineHeight(24, 16);
    margin: 0;

    @media only screen and (min-width: $screen-md) {
      font-size: toRem(20);
      line-height: getLineHeight(28, 20);
    }
  }
}

.modelsDoctor {
  width: 100%;
  height: auto;
  padding: toRem(20) toRem(20) toRem(60);

  @media only screen and (min-width: $screen-md) {
    padding: toRem(40) toRem(40) toRem(80);
    min-height: toRem(282);
    height: auto;
  }
  
  @media only screen and (min-width: $screen-lg + 1) {
    padding: toRem(40);
    min-height: toRem(334);
    height: 100%;
    margin-right: 0;
  }

  &:first-of-type {
    margin-bottom: 0;
  }

  .itemTitle {
    padding-bottom: 0;
    padding-top: toRem(20);

    @media only screen and (min-width: $screen-md) {
      padding-bottom: 0;
      padding-top: toRem(30);
    }
  }

  .itemText {
    @media only screen and (min-width: $screen-md) {
      max-width: none;
    }

    @media only screen and (max-width: $screen-md - 1) {
      font-size: toRem(16);
      line-height: getLineHeight(24, 16);
    }
  }
}

.ios {
  .itemTitle {
    @media only screen and (max-width: $screen-md - 1) {
      font-size: toRem(20);
      line-height: getLineHeight(28, 20);
    }
  }
}

.productDiscovery {
  width: 100%;
  height: auto;
  margin-right: 0;

  @media only screen and (min-width: $screen-md) {
    min-height: toRem(342);
  }

  @media only screen and (min-width: ($screen-lg + 1)) {
    height: 100%;
  }

  @media only screen and (max-width: $screen-sm) {
    padding: toRem(15) toRem(15) toRem(20);
    min-height: toRem(257);
  }

  .itemTitle {
    padding-top: 0;

    @media only screen and (max-width: $screen-md - 1) {
      padding-bottom: toRem(15);
    }
  }

  .itemText {
    p {
      @media only screen and (min-width: $screen-sm) {
        max-width: toRem(540);
      }
    }
    @media only screen and (max-width: ($screen-md - 1)) {
      margin: 0;
      padding-right: 0;
    }

    @media only screen and (min-width: ($screen-lg + 1)) {
      max-width: unset;
    }
  }
}

.testimonials {
  display: flex;
  flex-direction: column;
  width: toRem(620);
  height: toRem(380);
  
  @media only screen and (max-width: ($screen-md - 1)) {
    width: toRem(300);
    height: toRem(396);
  }
  
  .itemTitle {
    display: flex;
    flex-direction: column;
    order: 1;
    padding: toRem(15) 0 0;
    gap: toRem(10);
    
    .position {
      font-size: toRem(20);
      line-height: getLineHeight(28, 20);
      font-weight: 500;
      
      @media only screen and (max-width: ($screen-md - 1)) {
        font-size: toRem(16);
        line-height: getLineHeight(24, 16);
      }
    }
    
    .name {
      font-size: toRem(18);
      line-height: getLineHeight(26, 18);
      font-weight: 400;
      
      @media only screen and (max-width: ($screen-md - 1)) {
        font-size: toRem(16);
        line-height: getLineHeight(24, 16);
      }
    }
  }
}

.healthcare {
  @media only screen and (max-width: ($screen-md - 1)) {
    height: toRem(336);
  }

  .itemTitle {
    @media only screen and (max-width: ($screen-md - 1)) {
      font-size: toRem(20);
      line-height: getLineHeight(28, 20);
    }
  }
}